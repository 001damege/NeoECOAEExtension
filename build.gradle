plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'io.freefair.lombok' version '8.7.1'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id


base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "CurseForge Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // Registrate Fork
        name = "Ithundxr Maven"
        url = "https://maven.ithundxr.dev/snapshots"
    }
    maven {// Ldlib
        name "firstdarkdev"
        url "https://maven.firstdarkdev.xyz/snapshots"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url = "https://maven.createmod.net" }
}

dependencies {
    api("com.tterrag.registrate:Registrate:MC1.21-1.3.0+67")
    jarJar("com.tterrag.registrate:Registrate:MC1.21-1.3.0+67")

    implementation("org.appliedenergistics:appliedenergistics2:19.2.10")
    implementation("com.lowdragmc.ldlib:ldlib-neoforge-1.21.1:1.0.35.a")

    implementation("maven.modrinth:mekanism:10.7.14.79")
    implementation("maven.modrinth:applied-mekanistics:1.6.2")

    implementation("maven.modrinth:jade:15.10.0+neoforge")

    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    implementation("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}")
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        guild {
            client()

            systemProperty 'guideme.ae2.guide.sources', file('guidebook').absolutePath
            systemProperty 'guideme.ae2.guide.sourcesNamespace', 'neoecoae'
            systemProperty 'guideme.showOnStartup', 'neoecoae:guide'
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources {
    srcDirs 'src/generated/resources', 'src/guidebook/resources'
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('copyGuidebook', Copy) {
    group = 'build'

    from 'guidebook/'
    into 'src/guidebook/resources/assets/neoecoae/ae2guide'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn delombok
    from delombok.outputs.files
    archiveClassifier = "sources"
}

artifacts {
    archives sourcesJar
}


lombok {
    version = "1.18.34"
}
